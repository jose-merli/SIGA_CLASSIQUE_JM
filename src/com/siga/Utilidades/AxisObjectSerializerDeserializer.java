package com.siga.Utilidades;

import java.io.StringWriter;
import java.lang.reflect.Method;

import javax.xml.namespace.QName;

import org.apache.axis.Message;
import org.apache.axis.MessageContext;
import org.apache.axis.description.TypeDesc;
import org.apache.axis.encoding.SerializationContext;
import org.apache.axis.encoding.ser.BeanSerializer;
import org.apache.axis.server.AxisServer;
import org.xml.sax.helpers.AttributesImpl;

public class AxisObjectSerializerDeserializer {
	private static final String SOAP_START = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"><soapenv:Header/><soapenv:Body>";
	private static final String SOAP_START_XSI = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"><soapenv:Header/><soapenv:Body>";
	private static final String SOAP_END = "</soapenv:Body></soapenv:Envelope>";

	/**
     * Convert an Axis data object (as generated by WSDL2Java) to an XML string.
     * @param obj The xis JavaBean object.
     * @param removeNamespaces If true all namespace attributes will be removed from
     *                  the returned XML string.
     * @return A string containing the XML of the seriaslized Axis JavaBean object.
     * @throws AxisObjectException If an error is encountered while serializing
     *                  the Axis JavaBean.
     */
    public static String serializeAxisObject(final Object obj, final boolean removeNamespaces, final boolean prettyPrint) throws Exception {
        StringWriter outStr = new StringWriter();
        TypeDesc typeDesc = getAxisTypeDesc(obj);
        QName qname = typeDesc.getXmlType();
        String lname = qname.getLocalPart();
        if (lname.startsWith(">") && lname.length() > 1)
            lname = lname.substring(1);
        qname = removeNamespaces ? new QName(lname) : new QName(qname.getNamespaceURI(), lname);
        AxisServer server = new AxisServer();
        BeanSerializer ser = new BeanSerializer(obj.getClass(), qname, typeDesc);

        SerializationContext  ctx = new SerializationContext(outStr, new MessageContext(server));
        ctx.setSendDecl(false);
        ctx.setDoMultiRefs(false);
        ctx.setPretty(prettyPrint);
        
        try {
            ser.serialize(qname, new AttributesImpl(), obj, ctx);
        } catch (Exception e) {
            throw new Exception("Unable to serialize object " + obj.getClass().getName(), e);
        }
        
        String xml = outStr.toString();
        if (removeNamespaces) {
            xml = xml.replaceAll(" xmlns[:=].*?\".*?\"", "") .replaceAll(" xsi:type=\".*?\"", "") .replaceAll(" soapenc:arrayType=\".*?\"", "");
        }

        return(xml);
    }

    /**
     * Return the Axis TypeDesc object for the passed Axis JavaBean.
     * @param obj The Axis JavaBean object.
     * @return The Axis TypeDesc for the JavaBean.
     * @throws AxisObjectException If the passed object is not an Axis JavaBean.
     */
    private static TypeDesc getAxisTypeDesc(final Object obj) throws Exception {
        Class<?> objClass = obj.getClass();

        try {
            Method methodGetTypeDesc = objClass.getMethod("getTypeDesc", new Class[] {});
            TypeDesc typeDesc = (TypeDesc) methodGetTypeDesc.invoke(obj, new Object[] {});

            return(typeDesc);
        } catch (Exception e) {
            throw new Exception("Unable to get Axis TypeDesc for " + objClass.getName(), e);
        }
    }

    /**
     * Convert an XML string to an Axis data object (as generated by WSDL2Java).
     * @param xml A string containing the XML to be deseriaslized to an Axis JavaBean object.
     * @param clazz The class of the JavaBean object.
     * @return An Axis JavaBean object representing de XML.
     * @throws IllegalArgumentException When any of the parameters are NULL.
     * @throws Exception When the XML couldn't be deserialized.
     */
	public static Object deserializeAxisObject(String xml, Class<?> clazz) throws IllegalArgumentException, Exception {
		if (xml==null)
			throw new IllegalArgumentException("The XML can not be null.");
		if (clazz==null)
			throw new IllegalArgumentException("You must especify a return Class.");
		
		Object result = null;
		try {
			Message message = new Message(SOAP_START + xml + SOAP_END);
			result = message.getSOAPEnvelope().getFirstBody().getObjectValue(clazz);
		} catch (Exception e) {
			try {
				Message message = new Message(SOAP_START_XSI + xml + SOAP_END);
				result = message.getSOAPEnvelope().getFirstBody().getObjectValue(clazz);
			} catch (Exception e1) {
				throw new Exception(e1);
			}
		}
		return result;
	}
}